# -*- coding: utf-8 -*-
"""DIDB&W.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Et-Lzcpds63d5vg_sBIM7UFCW5wIitj
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import sys
import os
import cv2
from IPython.display import display, Image
from matplotlib.pyplot import imshow
from keras.layers import Conv2D, UpSampling2D, InputLayer
from keras.models import Sequential
from keras.preprocessing.image import img_to_array, load_img
from skimage.color import lab2rgb, rgb2lab
from skimage.io import imread
from skimage import transform
import matplotlib.pyplot as plt


# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

#sys.path.append("/content/drive/My Drive/Projet DataScience/Pipeline") # Path Didenot
sys.path.append("/content/drive/My Drive/CESI/Projets A5/Data Science/Projet DataScience") #Path Kayou
from Pipeline.Degradation import UglyImage

class colorizationModel():

    def __init__(self):
      self = self
      
    def load_batch(self,batch_size):
      path_files = '/content/Train/clean/' 
      img_res=(128,128)

      X_list = []
      Y_list = []

      filenames = os.listdir(path_files)
      filenames = filenames[:batch_size]

      for imagename in filenames:
        image = imread(path_files + imagename)
        #plt.imshow(image)
        #plt.show(image.all())
        image = transform.resize(image, (128,128))
        lab_image = rgb2lab(image)
        lab_image.shape
        lab_image_norm = (lab_image + [0, 128, 128]) / [100, 255, 255]

        X = lab_image_norm[:,:,0]
        Y = lab_image_norm[:,:,1:]

        X = X.reshape(1, X.shape[0], X.shape[1], 1)
        Y = Y.reshape(1, Y.shape[0], Y.shape[1], 2)
        X_list.append(np.array(X))
        Y_list.append(np.array(Y))

      return X_list, Y_list
    
    def load_model(self):
      model = Sequential()
      model.add(InputLayer(input_shape=(None, None, 1)))
      model.add(Conv2D(8, (3, 3), activation='relu', padding='same', strides=2))
      model.add(Conv2D(16, (3, 3), activation='relu', padding='same'))
      model.add(Conv2D(16, (3, 3), activation='relu', padding='same', strides=2))
      model.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
      model.add(Conv2D(32, (3, 3), activation='relu', padding='same', strides=2))
      model.add(UpSampling2D((2, 2)))
      model.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
      model.add(UpSampling2D((2, 2)))
      model.add(Conv2D(16, (3, 3), activation='relu', padding='same'))
      model.add(UpSampling2D((2, 2)))
      model.add(Conv2D(2, (3,3), activation='tanh', padding='same'))

      # Finish model
      model.compile(optimizer='adam', loss='mse', metrics=['accuracy', 'mse'])
      return model


    def train_model(self,batch_size, epochs):

      model = self.load_model()
      X,Y = self.load_batch(1)

      for i in range(len(X)):
          hist = model.fit(x=X[i], y=Y[i], batch_size=batch_size, epochs=epochs, verbose=0)
          hist
      
      model.save_weights('poidsCouleur')
      model.evaluate(X[0], Y[0], batch_size=1)
      '''
      uglyImg = UglyImage(image_size=(512,512))
      filenames = os.listdir('/content/Train/clean/')
      filenames = filenames[:1]
      for image in filenames:
        ugly, clean = uglyImg.uglifyImage('/content/Train/clean/'+ str(image),True)
      clean = clean[0][:,:,0]
      clean = clean.reshape(1, clean.shape[0], clean.shape[1], 3)
      print(clean.shape)
      '''
      output = model.predict(X[0])
      cur = np.zeros((128, 128, 3))
      cur[:,:,0] = X[0][:,:,0]
      cur[:,:,1:] = output[0]


      cur = (cur * [100, 255, 255]) - [0, 128, 128]
      rgb_image = lab2rgb(cur)
      imshow(rgb_image)